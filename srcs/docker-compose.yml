x-common-settings: &common-settings
  restart: unless-stopped

x-common-args: &common-args
  DOMAIN_NAME: ${DOMAIN_NAME}
  EMAIL: ${EMAIL}

services:
  nginx:
    container_name: nginx
    <<: *common-settings
    build:
      context: ./requirements/nginx
      args:
        <<: *common-args
        CERT_DIR: /etc/nginx/certs
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
      CERT_DIR: /etc/nginx/certs
    ports:
      - 80:80
      - 443:443
    volumes:
      - certs-data:/etc/nginx/certs
      - wp-data:/srv/wordpress
    networks:
      - frontend
    develop:
      watch:
        - path: ./requirements/nginx
          action: rebuild

  wordpress:
    container_name: wordpress
    <<: *common-settings
    build:
      context: ./requirements/wordpress
      args:
        <<: *common-args
        INSTALL_DIR: /srv/wordpress
    environment:
      <<: *common-args
      BR_VERSION: 1.23.2 # WP 6.4.3
      INSTALL_DIR: /srv/wordpress
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${DB_NAME}
      WP_ADMIN: ${WP_ADMIN}
      WP_ADMIN_PASS: ${WP_ADMIN_PASS}
      WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}
      WP_USER: ${WP_USER}
      WP_USER_PASS: ${WP_USER_PASS}
      WP_USER_EMAIL: ${WP_USER_EMAIL}
      REDIS_HOST: redis
      REDIS_PASS: ${REDIS_PASS}
    volumes:
      - wp-data:/srv/wordpress
    depends_on:
      - mariadb
      - redis
    networks:
      - frontend
      - backend

  mariadb:
    container_name: mariadb
    <<: *common-settings
    build:
      context: ./requirements/mariadb
    environment:
      DB_ROOT_PASS: ${DB_ROOT_PASS}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend

  redis:
    container_name: redis
    <<: *common-settings
    build:
      context: ./requirements/redis
    environment:
      REDIS_PASS: ${REDIS_PASS}
    volumes:
      - redis-data:/data
    networks:
      - backend

  ftp:
    container_name: ftp
    <<: *common-settings
    build:
      context: ./requirements/vsftp
    volumes:
      - wp-data:/srv/wordpress
    environment:
      FTP_USER: ${FTP_USER}
      FTP_PASS: ${FTP_PASS}
      FTP_COMMAND_PORT: ${FTP_COMMAND_PORT}
      FTP_DATA_PORT: ${FTP_DATA_PORT}
      FTP_PASSIVE_PORT_MIN: ${FTP_PASSIVE_PORT_MIN}
      FTP_PASSIVE_PORT_MAX: ${FTP_PASSIVE_PORT_MAX}
    ports:
      - "${FTP_COMMAND_PORT}:${FTP_COMMAND_PORT}"
      - "${FTP_DATA_PORT}:${FTP_DATA_PORT}"
      - "${FTP_PASSIVE_PORT_MIN}-${FTP_PASSIVE_PORT_MAX}:${FTP_PASSIVE_PORT_MIN}-${FTP_PASSIVE_PORT_MAX}"
    depends_on:
      - wordpress
    networks:
      - frontend

  static-site:
    container_name: static-site
    <<: *common-settings
    build:
      context: ./requirements/static-site
      args:
        <<: *common-args
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
    ports:
      - ${STATIC_PORT}:80
    networks:
      - frontend

  adminer:
    container_name: adminer
    <<: *common-settings
    build:
      context: ./requirements/adminer
    environment:
      ADMINER_DEFAULT_SERVER: mariadb
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    volumes:
      - adminer-data:/var/lib/adminer
    depends_on:
      - mariadb
    networks:
      - backend

  mailhog:
    container_name: mailhog
    <<: *common-settings
    build:
      context: ./requirements/mailhog
    environment:
      MAILHOG_PORT: ${MAILHOG_PORT}
    ports:
      - "1025:1025"
      - "${MAILHOG_PORT}:8025"
    volumes:
      - mailhog-data:/maildir
    networks:
      - frontend
      - backend

networks:
  frontend:
    name: frontend
  backend:
    name: backend

volumes:
  certs-data:
    name: certs-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CERTS_DATA}
  wp-data:
    name: wp-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${WP_DATA}
  db-data:
    name: db-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DB_DATA}
  redis-data:
    name: redis-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA}
  adminer-data:
    name: adminer-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${ADMINER_DATA}
  mailhog-data:
    name: mailhog-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAILHOG_DATA}
